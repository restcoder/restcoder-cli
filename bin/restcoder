#!/usr/bin/env node
'use strict';

process.bin = process.title = 'restcoder';

const Path = require('path');
const prompt = require('prompt');
const events  = require('events');
const co = require('co');
const updateNotifier = require('update-notifier');
const pkg = require("../package.json");
const program = require('commander');
const _ = require('underscore');
const inquirer = require("inquirer");
const ConfigService = require("../src/services/ConfigService");
const CodeService = require("../src/services/CodeService");
const APIService = require("../src/services/APIService");
const StartService = require("../src/services/StartService");
const helper = require("../src/services/helper");


function _checkLoggedIn() {
  if (!ConfigService.isAuthenticated()) {
    throw new Error("Your are not authenticated. Please use the 'restcoder login' command.");
  }
}

function _wrapCommand(fn) {
  return function () {
    var args = arguments;
    co(function*() {
      var binded = Function.prototype.bind.apply(fn, _.flatten([null, args]));
      yield binded();
      process.exit(0);
    }).catch(e => {
      console.log("ERR!".red, e.message);
      if (process.env.RESTCODER_CLI_LOCAL_MODE) {
        console.log(e.stack);
      }
      process.exit(1);
    });
  };
}

program
  .version(pkg.version)
  .command('init <problemId> [directory]')
  .description('init source code in current directory')
  .action(_wrapCommand(function*(problemId, directory) {

    _checkLoggedIn();
    const directoryPath = Path.join(process.cwd(), directory || problem.slug);
    yield CodeService.initCode(directoryPath, problemId);
  }));

program
  .command('submit')
  .description('Submit your source code and test your solution')
  .action(_wrapCommand(function*() {
    _checkLoggedIn();
    yield CodeService.submit(process.cwd());
  }));


program
  .command('start')
  .description('Start your application locally')
  .action(function() {
    const port = 5000;
    StartService.start(port, process.cwd());

  });


program
  .command('login')
  .description('login with your username and password')
  .action(_wrapCommand(function*() {
    var params = [{
      name: 'username',
      description: 'Your username:',
      required: true
    }, {
      name: 'password',
      description: 'Your password:',
      hidden: true,
      required: true
    }];

    var bindedPrompt = prompt.get.bind(prompt, params);
    var result;
    try {
      result = yield bindedPrompt;
    } catch (err) {
      if (err.message === "canceled") {
        process.exit();
      } else {
        throw err;
      }
    }
    var data = yield APIService.login(result.username, result.password);
    var settings = ConfigService.getSettings();
    settings.user = {
      username: result.username,
      token: data.token
    };
    ConfigService.updateSettings(settings);
    console.log("Authenticated successfully");
  }));


//unknown command
//display help
program.action(function () {
  program.outputHelp();
});

program.parse(process.argv);
if (process.argv.length === 2) {
  program.outputHelp();
}

//check for update
updateNotifier({ pkg, updateCheckInterval: 0 }).notify();