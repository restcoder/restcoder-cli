#!/usr/bin/env node
'use strict';

process.bin = process.title = 'restcoder';

const prompt = require('prompt');
const co = require('co');
const updateNotifier = require('update-notifier');
const pkg = require('../package.json');
const program = require('commander');
const _ = require('underscore');
const ConfigService = require('../src/services/ConfigService');
const CodeService = require('../src/services/CodeService');
const APIService = require('../src/services/APIService');
const StartService = require('../src/services/StartService');
const TutorialService = require('../src/services/TutorialService');
const TestService = require('../src/services/TestService');
const EnvService = require('../src/services/EnvService');

prompt.message = '';
prompt.delimiter = '';


function _checkLoggedIn() {
  if (!ConfigService.isAuthenticated()) {
    throw new Error("Your are not authenticated. Please use the 'restcoder login' command.");
  }
}

function _wrapCommand(fn, dontExit) {
  return function () {
    const args = arguments;
    co(function*() {
      const binded = Function.prototype.bind.apply(fn, _.flatten([null, args]));
      yield binded();
      if (!dontExit) {
        process.exit(0);
      }
    }).catch(e => {
      console.log('ERR!'.red, e.message);
      if (process.env.RESTCODER_CLI_LOCAL_MODE) {
        console.log(e.stack);
      }
      process.exit(1);
    });
  };
}

program
  .version(pkg.version)
  .command('init <problemId> [directory]')
  .option('-c, --config-only', 'create only the restcoder.yaml config')
  .description('Initialize a code template for the given problem.' +
    ' If directory is not provided a new directory will be created.')
  .action(_wrapCommand(function*(problemId, directory, options) {
    _checkLoggedIn();
    yield CodeService.initCode(problemId, directory, options);
  }))
  .on('--help', () => {
    console.log('  Examples:');
    console.log();
    console.log('  Initialize a template for the problem 1. It will create a directory `starter-hello-world`. ');
    console.log('    $ restcoder init 1');
    console.log();
    console.log('  Initialize in the current directory.');
    console.log('    $ restcoder init 1 .');
    console.log();
    console.log('  Initialize in a custom directory.');
    console.log('    $ restcoder init 1 my-custom-dir');
    console.log();
  });

program
  .command('submit')
  .description('Submit your source code and test your solution')
  .action(_wrapCommand(function*() {
    _checkLoggedIn();
    yield CodeService.submit(process.cwd());
  }));

program
  .command('start')
  .option('-p, --port <n>', 'the port to listen for the web process (default 5000)', parseInt)
  .description('Start your application locally')
  .action(_wrapCommand(function*(options) {
    if (process.env.C9_HOSTNAME) {
      console.log('Your code is running at \x1B[01;34mhttp://' + process.env.C9_HOSTNAME + '\x1B[00m.');
    }
    StartService.start(options.port || process.env.PORT || 5000, process.cwd());
  }, true));

program
  .command('test')
  .option('--host <n>', 'the host of your API (default localhost)')
  .option('-p, --port <n>', 'the port of your API (default 5000)', parseInt)
  .description('Test application locally using a test suite from Postman')
  .action(_wrapCommand(function*(options) {
    const url = `http://${options.host || 'localhost'}:${options.port || process.env.PORT || 5000}`;
    TestService.test(url, process.cwd());
  }));


program
  .command('set <name>')
  .description('Set an environmental variable to .env file, name is a service name e.g. "postgres", "mysql", "mongo"')
  .action(_wrapCommand(function*(name) {
    yield EnvService.setVariable(process.cwd(), name);
  }));

program
  .command('login')
  .description('Login with your username and password')
  .action(_wrapCommand(function*() {
    const params = [{
      name: 'username',
      description: 'Your username:',
      required: true
    }, {
      name: 'password',
      description: 'Your password:',
      hidden: true,
      required: true
    }];

    const bindedPrompt = prompt.get.bind(prompt, params);
    let result;
    try {
      result = yield bindedPrompt;
    } catch (err) {
      if (err.message === 'canceled') {
        process.exit();
      } else {
        throw err;
      }
    }
    const data = yield APIService.login(result.username, result.password);
    const settings = ConfigService.getSettings();
    settings.user = {
      username: result.username,
      token: data.token
    };
    ConfigService.updateSettings(settings);
    console.log('Authenticated successfully');
  }));


program
  .command('tutorial')
  .description('Initialize a tutorial problem')
  .action(_wrapCommand(function*() {
    yield TutorialService.init();
  }));


// unknown command
// display help
program.action(() => {
  program.outputHelp();
});

program.parse(process.argv);
if (process.argv.length === 2) {
  program.outputHelp();
}

// check for update
updateNotifier({ pkg, updateCheckInterval: 0 }).notify();
