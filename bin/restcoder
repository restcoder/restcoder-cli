#!/usr/bin/env node
'use strict';

process.bin = process.title = 'restcoder';

var prompt = require('prompt');
var co = require('co');
var updateNotifier = require('update-notifier');
var pkg = require("../package.json");
var program = require('commander');
var _ = require('underscore');
var inquirer = require("inquirer");
var ConfigService = require("../services/ConfigService");
var CodeService = require("../services/CodeService");
var APIService = require("../services/APIService");

var supportedPlatforms = ["nodejs", "python", "ruby", "java"];
prompt.message = "";
prompt.delimiter = "";


function _prompt(questions) {
    return new Promise((resolve) => {
        inquirer.prompt(questions, function(answers) {
            resolve(answers);
        });
    });
}

function _checkLoggedIn() {
    if (!ConfigService.isAuthenticated()) {
        throw new Error("Your are not authenticated. Please use the 'login' command.");
    }
}

function _wrapCommand(fn) {
    return function () {
        var args = arguments;
        co(function* () {
            var binded = Function.prototype.bind.apply(fn, _.flatten([null, args]));
            yield binded();
            process.exit(0);
        }).catch(e => {
            console.log("ERR!".red, e.message);
            console.log(e.stack);
            process.exit(1);
        });
    };
}

program
    .version(pkg.version)
    .command('init <problemId>')
    .description('init source code in current directory')
    .action(_wrapCommand(function* (problemId) {
        _checkLoggedIn();
        console.log("Initializing source code...");

        var settings = ConfigService.getSettings();
        var answers = yield _prompt([{
            type: "list",
            name: "language",
            default: settings.defaultLanguage,
            message: "Choose language",
            choices: supportedPlatforms
        }]);
        var language = answers.language;
        settings.defaultLanguage = language;
        ConfigService.updateSettings(settings);
        yield CodeService.initCode(process.cwd(), problemId, language);
        console.log("SUCCESS!".green);
    }));

program
    .command('submit')
    .description('Submit your source code and test your solution')
    .action(_wrapCommand(function* () {
        _checkLoggedIn();
        yield CodeService.submit(process.cwd());
    }));


program
    .command('login')
    .description('login with your username and password')
    .action(_wrapCommand(function* () {
        var params = [{
            name: 'username',
            description: 'Your username:',
            required: true
        }, {
            name: 'password',
            description: 'Your password:',
            hidden: true,
            required: true
        }];
        
        var bindedPrompt = prompt.get.bind(prompt, params);
        var result;
        try {
            result = yield bindedPrompt;
        } catch (err) {
            if (err.message === "canceled") {
                process.exit();
            } else {
                throw err;
            }
        }
        var data = yield APIService.login(result.username, result.password);
        var settings = ConfigService.getSettings();
        settings.user = {
            username: result.username,
            token: data.token
        };
        ConfigService.updateSettings(settings);
        console.log("Authenticated successfully");
    }));


//unknown command
//display help
program.action(function () {
    program.outputHelp();
});

program.parse(process.argv);
if (process.argv.length === 2) {
    program.outputHelp();
}

//check for update
updateNotifier({pkg, updateCheckInterval: 0}).notify();